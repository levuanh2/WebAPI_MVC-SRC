// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuNhua.Data;

#nullable disable

namespace TuNhua.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250713083804_datagiohang")]
    partial class datagiohang
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChiTietDonHangDB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DonGia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("MaDonHang")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaHangHoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaDonHang");

                    b.HasIndex("MaHangHoa");

                    b.ToTable("ChiTietDonHangs", (string)null);
                });

            modelBuilder.Entity("DonHangDB", b =>
                {
                    b.Property<Guid>("MaDonHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaChiGiao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("NgayDat")
                        .HasColumnType("datetime2");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TinhTrang")
                        .HasColumnType("int");

                    b.Property<decimal>("TongTien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaDonHang");

                    b.HasIndex("UserId");

                    b.ToTable("DonHangs", (string)null);
                });

            modelBuilder.Entity("LoaiHangHoaDB", b =>
                {
                    b.Property<Guid>("LoaiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenLoai")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LoaiId");

                    b.ToTable("LoaiHangHoas", (string)null);
                });

            modelBuilder.Entity("TuNhua.Data.GioHangChiTietDB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaGioHang")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaHangHoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaGioHang");

                    b.HasIndex("MaHangHoa");

                    b.ToTable("GioHangChiTietDBs");
                });

            modelBuilder.Entity("TuNhua.Data.GioHangDB", b =>
                {
                    b.Property<Guid>("MaGioHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaGioHang");

                    b.HasIndex("UserId");

                    b.ToTable("GioHangDBs");
                });

            modelBuilder.Entity("TuNhua.Data.HangHoaDB", b =>
                {
                    b.Property<Guid>("MaHangHoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DonGia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LoaiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Soluong")
                        .HasColumnType("int");

                    b.Property<string>("TenHangHoa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MaHangHoa");

                    b.HasIndex("LoaiId");

                    b.ToTable("HangHoas", (string)null);
                });

            modelBuilder.Entity("TuNhua.Data.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TuNhua.Data.VaiTro", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenVaiTro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("VaiTros", (string)null);
                });

            modelBuilder.Entity("UserDB", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ChiTietDonHangDB", b =>
                {
                    b.HasOne("DonHangDB", "DonHang")
                        .WithMany("ChiTietDonHangDBs")
                        .HasForeignKey("MaDonHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuNhua.Data.HangHoaDB", "HangHoa")
                        .WithMany("ChiTietDonHangs")
                        .HasForeignKey("MaHangHoa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DonHang");

                    b.Navigation("HangHoa");
                });

            modelBuilder.Entity("DonHangDB", b =>
                {
                    b.HasOne("UserDB", "UserBD")
                        .WithMany("DonHangDBs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserBD");
                });

            modelBuilder.Entity("TuNhua.Data.GioHangChiTietDB", b =>
                {
                    b.HasOne("TuNhua.Data.GioHangDB", "GioHang")
                        .WithMany("ChiTietGioHang")
                        .HasForeignKey("MaGioHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuNhua.Data.HangHoaDB", "HangHoa")
                        .WithMany()
                        .HasForeignKey("MaHangHoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GioHang");

                    b.Navigation("HangHoa");
                });

            modelBuilder.Entity("TuNhua.Data.GioHangDB", b =>
                {
                    b.HasOne("UserDB", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TuNhua.Data.HangHoaDB", b =>
                {
                    b.HasOne("LoaiHangHoaDB", "Loai")
                        .WithMany("HangHoas")
                        .HasForeignKey("LoaiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Loai");
                });

            modelBuilder.Entity("TuNhua.Data.RefreshToken", b =>
                {
                    b.HasOne("UserDB", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserDB", b =>
                {
                    b.HasOne("TuNhua.Data.VaiTro", "vaiTro")
                        .WithMany("UserDBs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("vaiTro");
                });

            modelBuilder.Entity("DonHangDB", b =>
                {
                    b.Navigation("ChiTietDonHangDBs");
                });

            modelBuilder.Entity("LoaiHangHoaDB", b =>
                {
                    b.Navigation("HangHoas");
                });

            modelBuilder.Entity("TuNhua.Data.GioHangDB", b =>
                {
                    b.Navigation("ChiTietGioHang");
                });

            modelBuilder.Entity("TuNhua.Data.HangHoaDB", b =>
                {
                    b.Navigation("ChiTietDonHangs");
                });

            modelBuilder.Entity("TuNhua.Data.VaiTro", b =>
                {
                    b.Navigation("UserDBs");
                });

            modelBuilder.Entity("UserDB", b =>
                {
                    b.Navigation("DonHangDBs");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
